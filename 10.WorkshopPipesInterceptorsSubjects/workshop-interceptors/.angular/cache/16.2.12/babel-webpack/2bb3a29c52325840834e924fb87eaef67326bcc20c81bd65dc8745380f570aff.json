{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  // THEMES\n  getThemes() {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/themes`);\n  }\n  getTheme(id) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/themes/${id}`);\n  }\n  createTheme(themeName, postText) {\n    const payload = {\n      themeName,\n      postText\n    };\n    return this.http.post(`/api/themes`, payload);\n  }\n  // POSTS\n  getPosts(limit) {\n    const {\n      apiUrl\n    } = environment;\n    let url = `${apiUrl}/posts`;\n    if (limit) {\n      url += `?limit=${limit}`;\n    }\n    return this.http.get(url);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","ApiService","constructor","http","getThemes","apiUrl","get","getTheme","id","createTheme","themeName","postText","payload","post","getPosts","limit","url","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Angular-Feb-2024-Workshop\\10.WorkshopPipesInterceptorsSubjects\\workshop-interceptors\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { Theme } from './types/theme';\r\nimport { Post } from './types/post';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // THEMES\r\n  getThemes() {\r\n    const { apiUrl } = environment;\r\n    return this.http.get<Theme[]>(`${apiUrl}/themes`);\r\n  }\r\n\r\n  getTheme(id: string) {\r\n    const { apiUrl } = environment;\r\n    return this.http.get<Theme>(`${apiUrl}/themes/${id}`);\r\n  }\r\n\r\n  createTheme(themeName: string, postText: string) {\r\n    const payload = { themeName, postText }\r\n    return this.http.post<Theme>(`/api/themes`, payload)\r\n  }\r\n\r\n  // POSTS\r\n  getPosts(limit?: number) {\r\n    const { apiUrl } = environment;\r\n    let url = `${apiUrl}/posts`;\r\n\r\n    if (limit) {\r\n      url += `?limit=${limit}`;\r\n    }\r\n\r\n    return this.http.get<Post[]>(url);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,0CAA0C;;;AAOtE,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExC;EACAC,SAASA,CAAA;IACP,MAAM;MAAEC;IAAM,CAAE,GAAGL,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACG,GAAG,CAAU,GAAGD,MAAM,SAAS,CAAC;EACnD;EAEAE,QAAQA,CAACC,EAAU;IACjB,MAAM;MAAEH;IAAM,CAAE,GAAGL,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACG,GAAG,CAAQ,GAAGD,MAAM,WAAWG,EAAE,EAAE,CAAC;EACvD;EAEAC,WAAWA,CAACC,SAAiB,EAAEC,QAAgB;IAC7C,MAAMC,OAAO,GAAG;MAAEF,SAAS;MAAEC;IAAQ,CAAE;IACvC,OAAO,IAAI,CAACR,IAAI,CAACU,IAAI,CAAQ,aAAa,EAAED,OAAO,CAAC;EACtD;EAEA;EACAE,QAAQA,CAACC,KAAc;IACrB,MAAM;MAAEV;IAAM,CAAE,GAAGL,WAAW;IAC9B,IAAIgB,GAAG,GAAG,GAAGX,MAAM,QAAQ;IAE3B,IAAIU,KAAK,EAAE;MACTC,GAAG,IAAI,UAAUD,KAAK,EAAE;;IAG1B,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAASU,GAAG,CAAC;EACnC;EAAC,QAAAC,CAAA,G;qBA7BUhB,UAAU,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVrB,UAAU;IAAAsB,OAAA,EAAVtB,UAAU,CAAAuB,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}