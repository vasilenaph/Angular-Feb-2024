{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError } from \"rxjs\";\nimport { environment } from \"src/environments/environment.development\";\nconst {\n  apiUrl\n} = environment;\nlet AppInterceptor = class AppInterceptor {\n  constructor(errorService, router) {\n    this.errorService = errorService;\n    this.router = router;\n    this.API = '/api';\n  }\n  intercept(req, next) {\n    if (req.url.startsWith(this.API)) {\n      req = req.clone({\n        url: req.url.replace(this.API, apiUrl),\n        withCredentials: true\n      });\n    }\n    return next.handle(req).pipe(catchError(err => {\n      if (err.status === 401) {} else {\n        this.errorService.setError(err);\n      }\n      return [err];\n    }));\n  }\n};\nAppInterceptor = __decorate([Injectable()], AppInterceptor);\nexport const AppInterceptorProvider = {\n  useClass: AppInterceptor,\n  multi: true,\n  provide: HTTP_INTERCEPTORS\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","Injectable","catchError","environment","apiUrl","AppInterceptor","constructor","errorService","router","API","intercept","req","next","url","startsWith","clone","replace","withCredentials","handle","pipe","err","status","setError","__decorate","AppInterceptorProvider","useClass","multi","provide"],"sources":["D:\\Angular-Feb-2024-Workshop\\10.WorkshopPipesInterceptorsSubjects\\workshop-interceptors\\src\\app\\app.interceptor.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Provider } from \"@angular/core\";\r\nimport { Observable, catchError } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment.development\";\r\nimport { ErrorService } from \"./core/error/error.service\";\r\n\r\nconst { apiUrl } = environment;\r\n\r\n@Injectable()\r\nclass AppInterceptor implements HttpInterceptor {\r\n\r\n    API = '/api';\r\n\r\n    constructor(private errorService: ErrorService, private router: Router) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        if (req.url.startsWith(this.API)) {\r\n            req = req.clone({\r\n                url: req.url.replace(this.API, apiUrl),\r\n                withCredentials: true,\r\n            })\r\n        }\r\n\r\n\r\n        return next.handle(req).pipe(\r\n            catchError((err => {\r\n                \r\n                if(err.status === 401) {\r\n                    \r\n                } else {\r\n                    this.errorService.setError(err);\r\n                }\r\n\r\n                return [err];\r\n            })\r\n            ));\r\n    }\r\n}\r\n\r\nexport const AppInterceptorProvider: Provider = {\r\n    useClass: AppInterceptor,\r\n    multi: true,\r\n    provide: HTTP_INTERCEPTORS,\r\n}"],"mappings":";AAAA,SAASA,iBAAiB,QAA8D,sBAAsB;AAC9G,SAASC,UAAU,QAAkB,eAAe;AACpD,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,WAAW,QAAQ,0CAA0C;AAGtE,MAAM;EAAEC;AAAM,CAAE,GAAGD,WAAW;AAG9B,IAAME,cAAc,GAApB,MAAMA,cAAc;EAIhBC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;IAF9D,KAAAC,GAAG,GAAG,MAAM;EAE8D;EAE1EC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAE9C,IAAID,GAAG,CAACE,GAAG,CAACC,UAAU,CAAC,IAAI,CAACL,GAAG,CAAC,EAAE;MAC9BE,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC;QACZF,GAAG,EAAEF,GAAG,CAACE,GAAG,CAACG,OAAO,CAAC,IAAI,CAACP,GAAG,EAAEL,MAAM,CAAC;QACtCa,eAAe,EAAE;OACpB,CAAC;;IAIN,OAAOL,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC,CAACQ,IAAI,CACxBjB,UAAU,CAAEkB,GAAG,IAAG;MAEd,IAAGA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE,C,CAEtB,MAAM;QACH,IAAI,CAACd,YAAY,CAACe,QAAQ,CAACF,GAAG,CAAC;;MAGnC,OAAO,CAACA,GAAG,CAAC;IAChB,CAAE,CACD,CAAC;EACV;CACH;AA7BKf,cAAc,GAAAkB,UAAA,EADnBtB,UAAU,EAAE,C,EACPI,cAAc,CA6BnB;AAED,OAAO,MAAMmB,sBAAsB,GAAa;EAC5CC,QAAQ,EAAEpB,cAAc;EACxBqB,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE3B;CACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}